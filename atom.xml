<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[QianCY的技术日志]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://qiancy.com/"/>
  <updated>2014-01-15T12:36:51.085Z</updated>
  <id>http://qiancy.com/</id>
  
  <author>
    <name><![CDATA[eden]]></name>
    <email><![CDATA[cyqian@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[使用gunicorn来部署django应用]]></title>
    <link href="http://qiancy.com/2014/01/14/use-gunicorn-to-deploy-django/"/>
    <id>http://qiancy.com/2014/01/14/use-gunicorn-to-deploy-django/</id>
    <published>2014-01-14T10:25:55.000Z</published>
    <updated>2014-01-15T12:31:55.000Z</updated>
    <content type="html"><![CDATA[<p>第一次注意到gunicorn这个django部署工具是在instagram的技术报告里，主要吸引我的地方就两个：</p>
<ol>
<li>部署与扩展都非常容易</li>
<li>与nginx集成良好</li>
</ol>
<p>下面实际的记录可能包含gunicorn和django以外的其他软件包的安装，是我顺手记录下得，基本环境并不包含这些。</p>
<a id="more"></a>

<h2 id="-">准备工作</h2>
<h3 id="1-django">1.安装django</h3>
<p>python不说了，linux基本自带。django可以向下面部分一样选择使用easy_install或者pip来安装，但是在我的环境下pipy的服务器下载django非常的慢，经常连不上，因此还是下载源码安装：
目前的版本是<a href="https://www.djangoproject.com/download/1.6.1/tarball/" target="_blank">Django-1.6.1</a>。</p>
<p>cd到解压目录，执行：</p>
<pre><code>sudo python setup.py install
</code></pre><h3 id="2-django-">2.django项目运行的依赖项</h3>
<p>依赖项主要是数据库，以及django有关的各类插件或模块，以我自己的部署为例：</p>
<p><strong>PostgreSQL</strong></p>
<p>我的django使用PostgreSQL为主要数据库，所以这个逃不掉。下载与安装说明请<a href="http://www.postgresql.org/download/" target="_blank">戳这里</a>。尽管有种种不建议，我还是使用了官方提供的<a href="http://www.enterprisedb.com/products-services-training/pgdownload" target="_blank">Graphic Installer</a>。</p>
<p><strong>psycopg2</strong></p>
<p>PostgreSQL的python语言接口</p>
<pre><code>sudo apt-get install python-psycopg2
</code></pre><p><strong>空间数据支持</strong></p>
<p>由于依赖PostgreSQL的空间数据扩展PostGIS，而读写空间数据需要其他额外的库资源。因此，安装完具体需要安装：</p>
<ul>
<li>GEOS</li>
<li>PROJ.4</li>
<li>PostGIS</li>
</ul>
<p>这个在OSX、Linux和Windows环境下差异较大，具体查看<a href="https://docs.djangoproject.com/en/dev/ref/contrib/gis/install/geolibs/" target="_blank">官方文档的说明</a>。</p>
<h3 id="3-gunicorn">3.安装gunicorn</h3>
<h4 id="-">下载源码安装</h4>
<pre><code>$ curl -O http://peak.telecommunity.com/dist/ez_setup.py
$ sudo python ez_setup.py -U setuptools
</code></pre><p>由于生产环境和开发环境不一样，实际上我用到了如下两个：</p>
<h4 id="easy_install-">easy_install安装</h4>
<pre><code>$ sudo easy_install -U gunicorn
</code></pre><h4 id="pip-">pip安装</h4>
<pre><code>$ sudo pip install gunicorn
</code></pre><h2 id="-gunicorn-">让gunicorn跑起来</h2>
<h3 id="1-gunicorn-">1. gunicorn命令方式</h3>
<pre><code>gunicorn
gunicorn_django
gunicorn_paster
</code></pre><p><strong>gunicorn_django的写法</strong></p>
<pre><code>$ gunicorn_django [OPTIONS] [SETTINGS_PATH]
</code></pre><p>如果不指定[SETTINGS_PATH]，将在当前文件夹查找settings.py。</p>
<p><strong>gunicorn的写法</strong></p>
<p>根据官方文档的提示，建议Django1.4以上版本，直接使用gunicorn命令，而不是gunicorn_django命令，在这里暂时不去追究原因。</p>
<p>其实很简单，cd到manage.py所在目录，从wsgi所在app启动（我的app叫mserv）。</p>
<pre><code>gunicorn mserv.wsgi
</code></pre><p>这就是纯WSGI写法。现在再多写一点，绑定ip和端口：</p>
<pre><code>gunicorn -b 192.168.1.2:7777 mserv.wsgi
</code></pre><p>好了，可以在客户机上查看你的服务了。那么可以再多一点点，多一个工人帮你搬东西，会快一些：</p>
<pre><code>gunicorn -b 192.168.1.2:7777 -w 2 mserv.wsgi
</code></pre><p>这样启动的时候你会看到两个worker：</p>
<pre><code>2014-01-15 20:01:15 [26515] [INFO] Starting gunicorn 18.0
2014-01-15 20:01:15 [26515] [INFO] Listening at: http://192.168.1.2:7777 (26515)
2014-01-15 20:01:15 [26515] [INFO] Using worker: sync
2014-01-15 20:01:15 [26520] [INFO] Booting worker with pid: 26520
2014-01-15 20:01:15 [26521] [INFO] Booting worker with pid: 26521
</code></pre><p>多么体贴！</p>
<p>更多命令参数可看官方文档的<a href="http://docs.gunicorn.org/en/latest/settings.html" target="_blank">Settings部分</a>。</p>
<h3 id="2-django-manage-py-">2. django manage.py方式</h3>
<p>好吧，确实有更简单的方式，我们真的可以使用django的manage.py来跑gunicorn服务，我叫它植入式。</p>
<p>首先修改django的settings.py:</p>
<pre><code>INSTALLED_APPS = (
    ...
    &quot;gunicorn&quot;,
)
</code></pre><p>然后命令行到django项目目录，可以做很神奇的事情：</p>
<pre><code>python manage.py run_gunicorn
</code></pre><h2 id="-">小结</h2>
<p>这是一个功能强大、易于配置的，对django友好的部署环境，这里是一个开始。个人而言，后面可以讨论的内容包括但不限于：</p>
<ul>
<li>性能测试与参数调优</li>
<li>与nginx部署环境的整合</li>
<li>合理处理消息，研究真实生产环境中如何管理服务</li>
<li>对gunicorn运行状况的监控</li>
<li>整合django的自动化部署</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<p>第一次注意到gunicorn这个django部署工具是在instagram的技术报告里，主要吸引我的地方就两个：</p>
<ol>
<li>部署与扩展都非常容易</li>
<li>与nginx集成良好</li>
</ol>
<p>下面实际的记录可能包含gunicorn和django以外的其他软件包的安装，是我顺手记录下得，基本环境并不包含这些。</p>
]]></summary>
    
      <category term="django" scheme="http://qiancy.com/tags/django/"/>
    
      <category term="gunicorn" scheme="http://qiancy.com/tags/gunicorn/"/>
    
      <category term="postgresql" scheme="http://qiancy.com/tags/postgresql/"/>
    
      <category term="postgis" scheme="http://qiancy.com/tags/postgis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[为什么使用django]]></title>
    <link href="http://qiancy.com/2014/01/13/why-django/"/>
    <id>http://qiancy.com/2014/01/13/why-django/</id>
    <published>2014-01-13T15:06:57.000Z</published>
    <updated>2014-01-15T12:33:20.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-django-">使用django的缘由</h2>
<p>很多事情在开始之初，一般很难会有绝对成熟的理由和卓越的趋势判断。因此当初选择django入手，主要只是出于这么几个考虑：</p>
<ol>
<li>后台需要更敏捷些。这也是python一早就映入了我的眼帘的原因，也是出于对现有后端平台开发状况的不满。当前团队主要在使用的后台开发技术已经积累地比较成熟，能够很好地满足项目的需要，但未必适合轻量级甚至创新型应用的推进。或框架过于庞大，或组织过于凌乱。希望能够有一个平台能够介于两者之间，并且最好是可控的。</li>
<li>不重复造轮子。其实python的世界里从来不乏好的框架，不同框架之间的优劣争论也四处可见也从未见过可靠的结论。我的看法是，适用即可。对于综合性非常强的gis类应用，我不希望在基础架构上耗费太多的精力。django是一个考虑周详的框架，从ORM到admin管理工具，他思考了几乎所有的主要问题。</li>
<li>适度可控。尽管我不造轮子，但是如果轮子出现什么问题，我依旧能够对他进行改造，哪怕是打补丁，来满足我的需要。django是一个开源软件，并且代码组织良好，发展多年来一直比较稳定，在国外也拥有相当的用户基础，虽然一度被职责不够灵活，但是在我看来，框架与灵活本就是一堆矛盾，只在于供需一致性。</li>
</ol>
<a id="more"></a>

<h2 id="-">开始尝试</h2>
<p>万事开头难，我一直希望在繁忙中可以逐渐积累出一个app的雏形，以供多个方向参考发展只用。这可以是个不太复杂的应用，但必须适用并且贴合实际。这个有点难，因为每个人的行为和理想很难完全保持一直。但是好在我们有不错的机会推动，以至于app很快就从零开始产生。</p>
<p>起初，django扮演的角色并不复杂。我们需要一个用户管理环境，包括用户的增删改查和图层权限分配。django的user管理模型能够适应大多数初级需求，并且我们没有多余的人手去改造以前的技术平台，因此，就这么开始了。</p>
<h2 id="orm-auth-session-admin">orm、auth、session与admin</h2>
<p>这几个轮子都是django的重要组成部分。</p>
<p>orm机制解放了大多数对关系数据库的操作，尤其是对关联表的操作；另一个好处是会强迫自己更加重视设计。即便是对于初学者，一而再、再而三的修改model，对于操作来说，毫无压力。</p>
<p>和一般应用的主要的区别，需求并不是在做一个网站，而是一个iPhone app。这要求我从一开始就要熟悉django的用户管理机制，并且尝试改造它。auth和session模块是django中相当成熟的部分，主要考虑的，是和iOS的native app的整合程度。坦白讲，这种做法还太小众，但是stackoverflow已久可以找到一些资源。</p>
<p>我们确实需要不同的管理员角色，来管理部分数据表，比如地图图层的管理——admin是一个非常理想的工具，他解放了双手，提供了一个不算太优雅，但也不是很差的model到可编辑表格的转换，可以满足使用。当然，有不少其他爱好者的工具，比如类似xadmin的对admin的梅花替换。</p>
<h2 id="-">并不完美，但有助于协作</h2>
<p>起初独立来完成这些工作，实属无奈，没有多余的人手，熟悉python框架的人更少。但是长远看，python严谨的语法，和django古板、保守的设计，一定程度上有助于后期的多人协作。尤其是project到apps的模块化分解，可以做到淋漓精致，这个目前还在实践中慢慢完善。</p>
]]></content>
    <summary type="html"><![CDATA[<h2 id="-django-">使用django的缘由</h2>
<p>很多事情在开始之初，一般很难会有绝对成熟的理由和卓越的趋势判断。因此当初选择django入手，主要只是出于这么几个考虑：</p>
<ol>
<li>后台需要更敏捷些。这也是python一早就映入了我的眼帘的原因，也是出于对现有后端平台开发状况的不满。当前团队主要在使用的后台开发技术已经积累地比较成熟，能够很好地满足项目的需要，但未必适合轻量级甚至创新型应用的推进。或框架过于庞大，或组织过于凌乱。希望能够有一个平台能够介于两者之间，并且最好是可控的。</li>
<li>不重复造轮子。其实python的世界里从来不乏好的框架，不同框架之间的优劣争论也四处可见也从未见过可靠的结论。我的看法是，适用即可。对于综合性非常强的gis类应用，我不希望在基础架构上耗费太多的精力。django是一个考虑周详的框架，从ORM到admin管理工具，他思考了几乎所有的主要问题。</li>
<li>适度可控。尽管我不造轮子，但是如果轮子出现什么问题，我依旧能够对他进行改造，哪怕是打补丁，来满足我的需要。django是一个开源软件，并且代码组织良好，发展多年来一直比较稳定，在国外也拥有相当的用户基础，虽然一度被职责不够灵活，但是在我看来，框架与灵活本就是一堆矛盾，只在于供需一致性。</li>
</ol>
]]></summary>
    
      <category term="django" scheme="http://qiancy.com/tags/django/"/>
    
      <category term="python" scheme="http://qiancy.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[重新开始]]></title>
    <link href="http://qiancy.com/2014/01/13/start-over/"/>
    <id>http://qiancy.com/2014/01/13/start-over/</id>
    <published>2014-01-13T10:41:05.000Z</published>
    <updated>2014-01-13T15:44:33.000Z</updated>
    <content type="html"><![CDATA[<p>从松散的drupal到伟大的wordpress，又到octopress和hexo，数据都没有移植。但这一次次的迁徙反映了向往简单的内心，尤其是现在这个博客的折腾度，似乎是为了证明自己其实不够懒惰而找个理由。</p>
<p>好吧，其实在此期间还考察了很多平台，包括tumblr、lofter、新浪博客、网易博客、和讯博客等，均感到不满意。对什么不满？束缚！让人窒息的束缚。</p>
<p>回归朴实，是一切事务发展历经浮躁后的必经之路，我尚未达此境界，但是感觉日常记录的点滴缺乏总结，或者说没有动力总结。东西就在哪里，不串联起来也能找得到，为什么要写呢？希望markdown带来舒适的同事，让我捡回思考与总结。</p>
]]></content>
    
    
      <category term="blog" scheme="http://qiancy.com/tags/blog/"/>
    
  </entry>
  
</feed>
